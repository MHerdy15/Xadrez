# xadrez_completo.py

def criar_tabuleiro():
    # Cria um tabuleiro padr√£o com todas as pe√ßas de xadrez
    tabuleiro = [["." for _ in range(8)] for _ in range(8)]

    # Pretas (mai√∫sculas)
    tabuleiro[0] = ["T", "C", "B", "Q", "K", "B", "C", "T"]
    tabuleiro[1] = ["P"] * 8

    # Brancas (min√∫sculas)
    tabuleiro[6] = ["p"] * 8
    tabuleiro[7] = ["t", "c", "b", "q", "k", "b", "c", "t"]

    return tabuleiro

def imprimir_tabuleiro(tabuleiro):
    print("  a b c d e f g h")
    for i, linha in enumerate(tabuleiro):
        print(f"{8 - i} " + " ".join(linha))
    print()

def coordenada_para_indice(coord):
    colunas = "abcdefgh"
    try:
        coluna = colunas.index(coord[0])
        linha = 8 - int(coord[1])
        return linha, coluna
    except (IndexError, ValueError):
        return None

def e_pe√ßa_do_jogador(pe√ßa, jogador):
    return pe√ßa.islower() if jogador == "branco" else pe√ßa.isupper()

def movimento_valido(pe√ßa, origem, destino, tabuleiro):
    dx = destino[0] - origem[0]
    dy = destino[1] - origem[1]
    pe√ßa = pe√ßa.lower()

    if pe√ßa == "p":  # Pe√£o
        dire√ß√£o = -1 if pe√ßa.islower() else 1
        start_row = 6 if pe√ßa.islower() else 1
        # Movimento simples
        if dx == dire√ß√£o and dy == 0 and tabuleiro[destino[0]][destino[1]] == ".":
            return True
        # Duplo passo do in√≠cio
        if origem[0] == start_row and dx == 2 * dire√ß√£o and dy == 0 and tabuleiro[origem[0] + dire√ß√£o][origem[1]] == "." and tabuleiro[destino[0]][destino[1]] == ".":
            return True
        # Captura
        if dx == dire√ß√£o and abs(dy) == 1 and tabuleiro[destino[0]][destino[1]] != ".":
            return True
        return False

    elif pe√ßa == "c":  # Cavalo
        return (abs(dx), abs(dy)) in [(2, 1), (1, 2)]

    elif pe√ßa == "t":  # Torre
        if dx != 0 and dy != 0:
            return False
        return caminho_livre(origem, destino, tabuleiro)

    elif pe√ßa == "b":  # Bispo
        if abs(dx) != abs(dy):
            return False
        return caminho_livre(origem, destino, tabuleiro)

    elif pe√ßa == "q":  # Rainha
        if dx == 0 or dy == 0 or abs(dx) == abs(dy):
            return caminho_livre(origem, destino, tabuleiro)
        return False

    elif pe√ßa == "k":  # Rei
        return max(abs(dx), abs(dy)) == 1

    return False

def caminho_livre(origem, destino, tabuleiro):
    dx = destino[0] - origem[0]
    dy = destino[1] - origem[1]
    passos = max(abs(dx), abs(dy))
    dir_x = (dx // passos) if dx != 0 else 0
    dir_y = (dy // passos) if dy != 0 else 0

    for passo in range(1, passos):
        x = origem[0] + passo * dir_x
        y = origem[1] + passo * dir_y
        if tabuleiro[x][y] != ".":
            return False
    return True

def jogar():
    tabuleiro = criar_tabuleiro()
    turno = "branco"

    while True:
        imprimir_tabuleiro(tabuleiro)
        print(f"Vez do jogador {turno}")

        origem_str = input("Digite a posi√ß√£o da pe√ßa que quer mover (ex: e2): ").lower()
        destino_str = input("Digite a posi√ß√£o de destino (ex: e4): ").lower()

        origem = coordenada_para_indice(origem_str)
        destino = coordenada_para_indice(destino_str)

        if not origem or not destino:
            print("‚ùå Coordenadas inv√°lidas.\n")
            continue

        pe√ßa = tabuleiro[origem[0]][origem[1]]
        if pe√ßa == "." or not e_pe√ßa_do_jogador(pe√ßa, turno):
            print("‚ùå Nenhuma pe√ßa sua nessa posi√ß√£o.\n")
            continue

        destino_pe√ßa = tabuleiro[destino[0]][destino[1]]
        if destino_pe√ßa != "." and e_pe√ßa_do_jogador(destino_pe√ßa, turno):
            print("‚ùå Voc√™ n√£o pode capturar sua pr√≥pria pe√ßa.\n")
            continue

        if not movimento_valido(pe√ßa, origem, destino, tabuleiro):
            print("‚ùå Movimento inv√°lido para essa pe√ßa.\n")
            continue

        if destino_pe√ßa.lower() == "k":
            print(f"üëë O rei do jogador {'preto' if turno == 'branco' else 'branco'} foi capturado!")
            print(f"‚úÖ {turno.upper()} venceu!")
            break

        tabuleiro[destino[0]][destino[1]] = pe√ßa
        tabuleiro[origem[0]][origem[1]] = "."
        turno = "preto" if turno == "branco" else "branco"

# Executar o jogo
if __name__ == "__main__":
    jogar()
